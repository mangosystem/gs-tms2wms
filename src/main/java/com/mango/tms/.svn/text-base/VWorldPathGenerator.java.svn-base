package com.mango.tms;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.URL;

import javax.imageio.ImageIO;

import org.geotools.geometry.GeneralEnvelope;

public class VWorldPathGenerator extends TMSPathGenerator {

	public BufferedImage getMap(TileGenerator fTG, int level, double centerX,
			double centerY, int reqWidth, int reqHeight) {
//		level = fTG.getResolutions().length - level;
		double[] resSet = fTG.getResolutions();
		double res = resSet[level - 1];
		double halfW = reqWidth / 2 * res;
		double halfH = reqHeight / 2 * res;
		double width = fTG.getTileWidth() * res;
		double height = fTG.getTileHeight() * res;

		int maxXTileNum = (int) Math.floor((fTG.getBounds().getMaximum(0) - fTG.getOriginX()) /width) -1;
		int maxYTileNum = (int) Math.floor((fTG.getOriginY() - fTG.getBounds().getMinimum(1)) /height) -1;
		
		double[] mindp = new double[]{centerX - halfW,centerY - halfH};
		double[] maxdp = new double[]{centerX + halfW, centerY + halfH};
		GeneralEnvelope curEnv = new GeneralEnvelope(mindp, maxdp);
		curEnv.setCoordinateReferenceSystem(fTG.getTileCRS());
		
		int startTileX = (int) Math
				.floor((curEnv.getMinimum(0) - fTG.getOriginX()) / (width));
		int endTileX = (int) Math
				.ceil((curEnv.getMaximum(0) - fTG.getOriginX()) / (width)) - 1;

		int startTileY = (int) Math
				.floor((fTG.getOriginY() - curEnv.getMaximum(1)) / (height));
		int endTileY = (int) Math
				.ceil((fTG.getOriginY() - curEnv.getMinimum(1)) / (height)) -1;

		int tileColCount = endTileX - startTileX + 1;
		int tileRowCount = endTileY - startTileY + 1;


		Tile[][] tiles = new Tile[tileRowCount][tileColCount];
		GeneralEnvelope fullEnv = null;
		for (int y = 0; y < tiles.length; y++) {
			int ay = startTileY + y;
			double minY = fTG.getOriginY() - (ay + 1) * height;
			double maxY = minY + height;
			int offsetY = (y) * fTG.getTileHeight();
			for (int x = 0; x < tiles[y].length; x++) {
				int ax = startTileX + x;
				double minX = fTG.getOriginX() + ax * width;
				double maxX = minX + width;
				int offsetX = x * fTG.getTileWidth();
				Rect rect = new Rect(offsetX, offsetY, fTG.getTileWidth(), fTG
						.getTileHeight());
				GeneralEnvelope env = new GeneralEnvelope(new double[]{minX, minY}, new double[]{maxX, maxY});
				env.setCoordinateReferenceSystem(fTG.getTileCRS());
				
				if (fullEnv == null) {
					fullEnv = new GeneralEnvelope(env);
				} else {
					fullEnv.add(env);
				}
				
				boolean include = fTG.getBounds().intersects(env, true);
				tiles[y][x] = new Tile(rect, level, resSet.length, include);
				tiles[y][x].setGridXY(ax, ay);
				if(!fTG.getBounds().intersects(env, false)) {
					tiles[y][x].setInclude(false);
				}
				
				if(maxXTileNum < ax || maxYTileNum < ay || ax < 0 || ay < 0) {
					tiles[y][x].setInclude(false);
				}
			}
		}

		int imageOffsetX = (int) ((fullEnv.getMinimum(0) - curEnv.getMinimum(0)) / res);
		int imageOffsetY = (int) ((curEnv.getMaximum(1) - fullEnv.getMaximum(1)) / res);

		BufferedImage bi = new BufferedImage(reqWidth, reqHeight,
				BufferedImage.TYPE_INT_ARGB);
		Graphics g = bi.getGraphics();

		for (int y = 0; y < tiles.length; y++) {
			for (int x = 0; x < tiles[y].length; x++) {
				BufferedImage tileImage = getTileImage(fTG,tiles[y][x]);
				Rect r = tiles[y][x].getRect();
				g.drawImage(tileImage, r.getX() + imageOffsetX, r.getY()
						+ imageOffsetY, null);
			}
		}

		if (fTG.isOutline()) {
			g.setColor(new Color(0xFFFF0000));
			for (int y = 0; y < tiles.length; y++) {
				for (int x = 0; x < tiles[y].length; x++) {
					Rect r = tiles[y][x].getRect();
					g.drawRect(r.getX() + imageOffsetX,
							r.getY() + imageOffsetY, r.getWidth(), r
									.getHeight());
				}
			}
		}

		return bi;
	}

	public BufferedImage getTileImage(TileGenerator fTG, Tile tile) {
		if(!tile.isInclude()){
			//System.out.println("BLANK");
			return fTG.getBlank();
		}
		
		String cacheFilePath = "";
		try {
			if(fTG.isTileCache()) {
				cacheFilePath = fTG.getCahcePath() + shortPath(tile);
				File cacheFile = new File(new URI(cacheFilePath));
				if(cacheFile.exists()) {
					//System.out.println(cacheFilePath);
					return ImageIO.read(cacheFile);
				}
			}
		} catch(Exception e) {
			
		}
		
		String path = buildPath(tile);
		try {
			{
				URL u = new URL(path);
				HttpURLConnection conn = (HttpURLConnection) u.openConnection();
				InputStream is = null;
				// Referer:http://map.vworld.kr/map/maps.do
				conn.addRequestProperty(
						"User-Agent",
						"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.110 Safari/537.36");
				if (conn.getResponseCode() == 200) {
					is = conn.getInputStream();
					BufferedImage bi = ImageIO.read(is);
					is.close();
					conn.disconnect();
					
					if(fTG.isTileCache()) {
						File f = new File(new URI(cacheFilePath));
						f.mkdirs();
						ImageIO.write(bi, path.substring(path.lastIndexOf(".") + 1), f);
					}
					
					return bi;
				} else {
					return fTG.getBlank();
				}

				// InputStream is = conn.getInputStream();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return fTG.getBlank();
		}
	}
}
